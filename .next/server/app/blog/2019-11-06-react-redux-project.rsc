3:I[4707,[],""]
5:I[6423,[],""]
6:I[2972,["972","static/chunks/972-fe008c56cc430895.js","931","static/chunks/app/page-536f575daef6a041.js"],""]
4:["slug","2019-11-06-react-redux-project","d"]
0:["FGJzCzu0zyJo5OttkLQvH",[[["",{"children":["blog",{"children":[["slug","2019-11-06-react-redux-project","d"],{"children":["__PAGE__?{\"slug\":\"2019-11-06-react-redux-project\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","2019-11-06-react-redux-project","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2ba819eb02ab4417.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__className_e8ce0c","children":["$","div",null,{"className":"min-h-screen bg-white","children":[["$","header",null,{"className":"border-b border-gray-200","children":["$","div",null,{"className":"max-w-4xl mx-auto px-4 py-6","children":["$","div",null,{"className":"flex items-center justify-between","children":["$","div",null,{"children":[["$","h1",null,{"className":"text-2xl font-bold text-gray-900","children":["$","a",null,{"href":"/","className":"hover:text-gray-700","children":"NPB Dev Blog"}]}],["$","p",null,{"className":"text-gray-600 text-sm mt-1","children":"by Nick Baughman, a software developer who works with Ruby and JavaScript"}]]}]}]}]}],["$","main",null,{"className":"max-w-4xl mx-auto px-4 py-8","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"text-center py-12","children":[["$","h1",null,{"className":"text-4xl font-bold text-gray-900 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-700 mb-4","children":"Page Not Found"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"The page you're looking for doesn't exist."}],["$","$L6",null,{"href":"/","className":"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors","children":"Go Home"}]]}],"notFoundStyles":[]}]}],["$","footer",null,{"className":"border-t border-gray-200 mt-12","children":["$","div",null,{"className":"max-w-4xl mx-auto px-4 py-6 text-center text-gray-600 text-sm","children":["© ",2025," Nick Baughman. Built with Next.js."]}]}]]}]}]}]],null],null],["$L7",null]]]]
8:T1169,<p>My final Flatiron School Online Software Engineering Bootcamp capstone project, titled ReOrder, is a fullstack web application utilizing a React/Redux JS frontend and a Ruby on Rails API backend. The function of this app is to allow a user to create a list of items, which have a name and a desired amount (called a ‘par’) and an amount ‘on hand’ which is input by the user. The app calculates the difference between the par and the on hand amount of each item and displays the ‘amount needed’ of each item dynamically as the on hand amount is entered by the user. The amounts needed of each item are then compiled into a “order” which is a list showing the item names and the amounts needed of each item. The user is then able to give the order a name and a delivery date, and then save the order to the database.</p>
<p>The main purpose of building this application was to gain insight into working with React and Redux which, as usual, I’d been shown how to do but hadn’t actually done yet. The first challenge is always sorting out where to start and when to start applying all of the new things I just learned. Do I build components first? What dependencies do I need to install? What about routing, should I plan that out first? How do I initially present the app to the user? What exactly is Redux again? Luckily our cohort lead always leaves us with a final walkthrough of how to get our project rolling, so, as usual, I started there.</p>
<p>Building out the Rails backend was the first step. Easy enough to do with the Rails API generator and scaffold. This app is pretty simple, only requiring 2 models (and tables), Items and Orders. Most of the work on the back end actually involved making the app ready to be deployed on Heroku. This is a whole can of worms that is basically separate from the objective of the project, so I won’t get into it here but I followed this walkthrough: https://blog.heroku.com/a-rock-solid-modern-web-stack</p>
<p>The real work was building the frontend. To start, a React app was created inside of my Rails API, inside of a client folder (<code>create-react-app client</code>). This builds out the basic framework for a React app. React introduces is use of Components into JavaScript, which utilize “state” as a way of handling and dynamically presenting data inside of the DOM. Anytime the state of a React Component changes, that Component is re-rendered and able to present new data while any other unrelated Components, who’s state hasn’t changed, remain the same.</p>
<p>The other half of the frontend is Redux. Redux modifies React by creating a “store”, which is essentially a global location where state, which has been extracted from React components, is kept. Redux makes changes to its store by dispatching actions to a reducer. The reducer is a switch that makes changes to its state (and therefore the store) based on the ‘type’ of action dispatched to it. React components access the Redux store and these dispatch functions by mapping its state to props (mapStateToProps) and mapping dispatch to props (mapDispatchToProp) by exporting a Redux ‘connected’ component. The connect function is imported from Redux and allows a component to send its state to the global store. Dispatch actions can be directly imported and connected: import { doAction } from './actions/index … export default connect(mapStateToProps, { doAction })(NameOfExportedComponent)</p>
<p>What I’ve discovered is that using Redux makes your Components more independent and flexible than they would be otherwise. Without Redux, in order for Components to share state (aka data) a relationship chain is required, which eventually can become complicated and unpredictable. With Redux, a Component is able to reach out to the store and access that data as if the store were a database.</p>
<p>With this capability in mind, Components are then structured into Container and Presentational components. Container components manage data, how things work and are usually stateful, whereas Presentational components deal with how things look and the actual rendering. Presentational components are stateless ideally, accessing data through props passed from a Container component.</p>
<p>Development of this app also included installing Thunk middleware to allow asynchronous communication with the Rails API, client-side routing using react-router, and styling with React Bootstrap.</p>
2:["$","article",null,{"className":"max-w-3xl mx-auto","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"text-4xl font-bold text-gray-900 mb-4","children":"Project 5: React/Redux Rails"}],["$","time",null,{"className":"text-gray-500 text-sm","children":"November 5, 2019"}]]}],["$","div",null,{"className":"prose prose-lg max-w-none","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$8"}}]}],["$","footer",null,{"className":"mt-12 pt-8 border-t border-gray-200","children":["$","div",null,{"className":"flex justify-between items-center","children":["$","div",null,{"className":"text-sm text-gray-600","children":["$","p",null,{"children":["Written by ",["$","strong",null,{"children":"Nick Baughman"}],", a software developer who works with Ruby and JavaScript."]}]}]}]}]]}]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Project 5: React/Redux Rails | NPB Dev Blog"}],["$","meta","3",{"name":"description","content":"My final Flatiron School Online Software Engineering Bootcamp capstone project, titled ReOrder, is a fullstack web application utilizing a React/Redux JS fronte..."}],["$","link","4",{"rel":"author","href":"https://npb-dev-blog.netlify.app"}],["$","meta","5",{"name":"author","content":"Nick Baughman"}],["$","meta","6",{"name":"creator","content":"Nick Baughman"}],["$","meta","7",{"property":"og:title","content":"Project 5: React/Redux Rails"}],["$","meta","8",{"property":"og:description","content":"My final Flatiron School Online Software Engineering Bootcamp capstone project, titled ReOrder, is a fullstack web application utilizing a React/Redux JS fronte..."}],["$","meta","9",{"property":"og:type","content":"article"}],["$","meta","10",{"property":"article:published_time","content":"Tue Nov 05 2019 19:00:00 GMT-0500 (Eastern Standard Time)"}],["$","meta","11",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","12",{"name":"twitter:title","content":"Project 5: React/Redux Rails"}],["$","meta","13",{"name":"twitter:description","content":"My final Flatiron School Online Software Engineering Bootcamp capstone project, titled ReOrder, is a fullstack web application utilizing a React/Redux JS fronte..."}],["$","meta","14",{"name":"next-size-adjust"}]]
1:null
